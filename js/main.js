// Dados dos m√≥dulos com conte√∫do embutido
const modulesData = [
    {
        id: 1,
        title: "Introdu√ß√£o ao Vibe Coding e IA",
        description: "Descubra a metodologia Vibe Coding e como a IA ser√° sua aliada no desenvolvimento.",
        category: "frontend",
        duration: "1h 30min",
        objectives: [
            "Entender o que √© a metodologia Vibe Coding",
            "Configurar ambiente de desenvolvimento inicial",
            "Escrever seu primeiro 'Hello, World!' com IA",
            "Compreender comunica√ß√£o eficaz com IA"
        ],
        content: `
            <h1>M√≥dulo 1: Introdu√ß√£o ao Vibe Coding e IA</h1>
            
            <h2>O que √© Vibe Coding?</h2>
            <p>O Vibe Coding √© uma abordagem de desenvolvimento que combina intui√ß√£o humana com intelig√™ncia artificial. Em vez de escrever cada linha de c√≥digo manualmente, voc√™ descreve suas ideias em linguagem natural e a IA auxilia na gera√ß√£o, corre√ß√£o e otimiza√ß√£o do c√≥digo.</p>
            
            <div style="background: rgba(99, 102, 241, 0.1); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 4px solid #6366f1;">
                <h3>üéØ Principais Benef√≠cios</h3>
                <ul>
                    <li>Acelera o aprendizado de programa√ß√£o</li>
                    <li>Permite foco no "o qu√™" em vez do "como"</li>
                    <li>Reduz erros comuns de sintaxe</li>
                    <li>Facilita experimenta√ß√£o e itera√ß√£o</li>
                </ul>
            </div>
            
            <h2>Configurando seu Ambiente</h2>
            <p>Para este curso, recomendamos usar o <strong>Replit</strong> como ambiente de desenvolvimento online:</p>
            
            <ol style="background: rgba(255, 255, 255, 0.05); padding: 20px; border-radius: 8px;">
                <li>Acesse <a href="https://replit.com" target="_blank" style="color: #6366f1;">replit.com</a> e crie uma conta gratuita</li>
                <li>Clique em "+ Create Repl" e selecione o template "HTML, CSS, JS"</li>
                <li>Nomeie como "vibe-coding-projeto"</li>
                <li>Pronto! Voc√™ tem um ambiente completo no navegador</li>
            </ol>
            
            <h2>Seu Primeiro "Hello, World!" com IA</h2>
            <p>Agora vamos criar nossa primeira p√°gina web usando a IA como assistente:</p>
            
            <div class="code-block" style="background: #1e293b; border-radius: 8px; margin: 20px 0; overflow: hidden; border: 1px solid #334155;">
                <div class="code-header" style="background: #334155; padding: 10px 15px; display: flex; justify-content: space-between; align-items: center;">
                    <span style="color: #cbd5e1; font-size: 12px; font-weight: bold;">HTML</span>
                    <button class="copy-btn" onclick="copyCode(this)" style="background: #6366f1; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                        üìã Copiar
                    </button>
                </div>
                <pre style="padding: 20px; margin: 0; overflow-x: auto; color: #f8fafc;"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="pt-BR"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Meu Primeiro Projeto Vibe Coding&lt;/title&gt;
    &lt;style&gt;
        body {
            font-family: 'Arial', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            text-align: center;
        }
        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .highlight {
            background: rgba(255, 255, 255, 0.2);
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid #ffeb3b;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="container"&gt;
        &lt;h1&gt;üöÄ Meu Primeiro Projeto Vibe Coding&lt;/h1&gt;
        &lt;p&gt;Ol√°, Mundo! Esta √© minha primeira p√°gina criada com ajuda da IA.&lt;/p&gt;
        &lt;div class="highlight"&gt;
            &lt;p&gt;&lt;strong&gt;Vibe Coding em a√ß√£o:&lt;/strong&gt; Esta p√°gina foi criada descrevendo o que eu queria em linguagem natural, e a IA me ajudou a transformar isso em c√≥digo!&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            </div>
            
            <h2>Comunica√ß√£o Eficaz com IA</h2>
            <p>Para obter os melhores resultados, siga estas diretrizes:</p>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0;">
                <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px; border-left: 3px solid #10b981;">
                    <h4 style="color: #10b981; margin-bottom: 10px;">‚úÖ Seja Espec√≠fico</h4>
                    <p style="margin: 0; color: #cbd5e1;">Em vez de "crie uma p√°gina", diga "crie uma p√°gina com t√≠tulo azul, par√°grafo explicativo e bot√£o verde".</p>
                </div>
                
                <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px; border-left: 3px solid #f59e0b;">
                    <h4 style="color: #f59e0b; margin-bottom: 10px;">üéØ Use Contexto</h4>
                    <p style="margin: 0; color: #cbd5e1;">Explique o que voc√™ est√° fazendo: "Estou criando minha primeira p√°gina para o curso de Vibe Coding".</p>
                </div>
                
                <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px; border-left: 3px solid #8b5cf6;">
                    <h4 style="color: #8b5cf6; margin-bottom: 10px;">üîÑ Itere e Melhore</h4>
                    <p style="margin: 0; color: #cbd5e1;">Se n√£o ficou perfeito, pe√ßa ajustes: "Pode mudar a cor para azul e centralizar o texto?".</p>
                </div>
                
                <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px; border-left: 3px solid #ef4444;">
                    <h4 style="color: #ef4444; margin-bottom: 10px;">‚ùì Pe√ßa Explica√ß√µes</h4>
                    <p style="margin: 0; color: #cbd5e1;">Sempre pergunte: "Como este c√≥digo funciona?" para aprender enquanto cria.</p>
                </div>
            </div>
            
            <h2>Tarefa Pr√°tica</h2>
            <div style="background: rgba(16, 185, 129, 0.1); padding: 20px; border-radius: 10px; border-left: 4px solid #10b981;">
                <h3 style="color: #10b981;">üéØ Sua Miss√£o</h3>
                <ol>
                    <li>Configure sua conta no Replit</li>
                    <li>Crie um projeto "HTML, CSS, JS"</li>
                    <li>Cole o c√≥digo acima no arquivo index.html</li>
                    <li>Clique em "Run" para ver sua p√°gina funcionando</li>
                    <li>Modifique o texto para personalizar com suas informa√ß√µes</li>
                </ol>
            </div>
        `
    },
    {
        id: 2,
        title: "Fundamentos de HTML",
        description: "Aprenda a estruturar p√°ginas web com HTML sem√¢ntico e acess√≠vel.",
        category: "frontend",
        duration: "2h",
        objectives: [
            "Dominar tags HTML essenciais",
            "Criar estruturas sem√¢nticas",
            "Implementar formul√°rios funcionais",
            "Usar HTML5 de forma correta"
        ],
        content: `
            <h1>M√≥dulo 2: Fundamentos de HTML</h1>
            
            <h2>O que √© HTML?</h2>
            <p>HTML (HyperText Markup Language) √© a linguagem de marca√ß√£o usada para estruturar conte√∫do na web. Pense nele como o esqueleto da sua p√°gina web.</p>
            
            <div style="background: rgba(99, 102, 241, 0.1); padding: 20px; border-radius: 10px; margin: 20px 0;">
                <h3>üèóÔ∏è Analogia da Constru√ß√£o</h3>
                <p>Se uma p√°gina web fosse uma casa:</p>
                <ul>
                    <li><strong>HTML</strong> = Estrutura (paredes, c√¥modos, portas)</li>
                    <li><strong>CSS</strong> = Decora√ß√£o (cores, m√≥veis, estilo)</li>
                    <li><strong>JavaScript</strong> = Funcionalidades (eletricidade, encanamento)</li>
                </ul>
            </div>
            
            <h2>Estrutura B√°sica do HTML</h2>
            <div class="code-block" style="background: #1e293b; border-radius: 8px; margin: 20px 0; overflow: hidden; border: 1px solid #334155;">
                <div class="code-header" style="background: #334155; padding: 10px 15px; display: flex; justify-content: space-between; align-items: center;">
                    <span style="color: #cbd5e1; font-size: 12px; font-weight: bold;">HTML</span>
                    <button class="copy-btn" onclick="copyCode(this)" style="background: #6366f1; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;">üìã Copiar</button>
                </div>
                <pre style="padding: 20px; margin: 0; overflow-x: auto; color: #f8fafc;"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="pt-BR"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Minha P√°gina&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Bem-vindo √† minha p√°gina!&lt;/h1&gt;
    &lt;p&gt;Este √© meu primeiro par√°grafo.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            </div>
            
            <h2>Tags HTML Essenciais</h2>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0;">
                <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px;">
                    <h4>&lt;h1&gt; - &lt;h6&gt;</h4>
                    <p>T√≠tulos e subt√≠tulos</p>
                    <code style="background: rgba(255, 255, 255, 0.1); padding: 5px; border-radius: 3px;">&lt;h1&gt;T√≠tulo Principal&lt;/h1&gt;</code>
                </div>
                
                <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px;">
                    <h4>&lt;p&gt;</h4>
                    <p>Par√°grafos de texto</p>
                    <code style="background: rgba(255, 255, 255, 0.1); padding: 5px; border-radius: 3px;">&lt;p&gt;Este √© um par√°grafo.&lt;/p&gt;</code>
                </div>
                
                <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px;">
                    <h4>&lt;a&gt;</h4>
                    <p>Links para outras p√°ginas</p>
                    <code style="background: rgba(255, 255, 255, 0.1); padding: 5px; border-radius: 3px;">&lt;a href="#"&gt;Link&lt;/a&gt;</code>
                </div>
                
                <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px;">
                    <h4>&lt;img&gt;</h4>
                    <p>Imagens</p>
                    <code style="background: rgba(255, 255, 255, 0.1); padding: 5px; border-radius: 3px;">&lt;img src="foto.jpg" alt="Descri√ß√£o"&gt;</code>
                </div>
            </div>
            
            <h2>Tarefa Pr√°tica</h2>
            <div style="background: rgba(16, 185, 129, 0.1); padding: 20px; border-radius: 10px; border-left: 4px solid #10b981;">
                <h3 style="color: #10b981;">üéØ Crie sua P√°gina de Apresenta√ß√£o</h3>
                <p>Use a IA para criar uma p√°gina pessoal que contenha:</p>
                <ul>
                    <li>Header com seu nome e navega√ß√£o</li>
                    <li>Se√ß√£o "Sobre Mim" com sua foto e descri√ß√£o</li>
                    <li>Se√ß√£o "Objetivos" com uma lista de suas metas</li>
                    <li>Footer com informa√ß√µes adicionais</li>
                </ul>
            </div>
        `
    },
    {
        id: 3,
        title: "Fundamentos de CSS",
        description: "Domine estilos, layouts e responsividade com CSS moderno.",
        category: "frontend",
        duration: "2h",
        objectives: [
            "Aplicar estilos CSS b√°sicos",
            "Trabalhar com seletores e propriedades", 
            "Criar layouts responsivos",
            "Usar Flexbox e Grid"
        ],
        content: `
            <h1>M√≥dulo 3: Fundamentos de CSS</h1>
            
            <h2>O que √© CSS?</h2>
            <p>CSS (Cascading Style Sheets) √© a linguagem usada para estilizar p√°ginas HTML. Enquanto HTML define a estrutura, CSS define a apar√™ncia.</p>
            
            <h2>Seletores CSS</h2>
            <div class="code-block" style="background: #1e293b; border-radius: 8px; margin: 20px 0; overflow: hidden; border: 1px solid #334155;">
                <div class="code-header" style="background: #334155; padding: 10px 15px; display: flex; justify-content: space-between; align-items: center;">
                    <span style="color: #cbd5e1; font-size: 12px; font-weight: bold;">CSS</span>
                    <button class="copy-btn" onclick="copyCode(this)" style="background: #6366f1; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;">üìã Copiar</button>
                </div>
                <pre style="padding: 20px; margin: 0; overflow-x: auto; color: #f8fafc;"><code>/* Seletor de Elemento */
p { color: red; }

/* Seletor de Classe */
.destaque { color: blue; }

/* Seletor de ID */
#titulo { color: green; }

/* Seletor Descendente */
div p { color: orange; }</code></pre>
            </div>
            
            <h2>Flexbox - Layout Moderno</h2>
            <p>Flexbox √© uma ferramenta poderosa para criar layouts flex√≠veis e responsivos.</p>
            
            <div class="code-block" style="background: #1e293b; border-radius: 8px; margin: 20px 0; overflow: hidden; border: 1px solid #334155;">
                <div class="code-header" style="background: #334155; padding: 10px 15px; display: flex; justify-content: space-between; align-items: center;">
                    <span style="color: #cbd5e1; font-size: 12px; font-weight: bold;">CSS</span>
                    <button class="copy-btn" onclick="copyCode(this)" style="background: #6366f1; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;">üìã Copiar</button>
                </div>
                <pre style="padding: 20px; margin: 0; overflow-x: auto; color: #f8fafc;"><code>/* Container flex√≠vel */
.container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 20px;
}

/* Card responsivo */
.card {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    flex: 1;
}

/* Responsividade */
@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }
}</code></pre>
            </div>
            
            <h2>Tarefa Pr√°tica</h2>
            <div style="background: rgba(16, 185, 129, 0.1); padding: 20px; border-radius: 10px; border-left: 4px solid #10b981;">
                <h3 style="color: #10b981;">üéØ Estilize sua P√°gina</h3>
                <p>Pegue a p√°gina HTML do m√≥dulo anterior e adicione CSS para:</p>
                <ul>
                    <li>Definir cores e tipografia</li>
                    <li>Criar um layout com Flexbox</li>
                    <li>Adicionar efeitos hover nos bot√µes</li>
                    <li>Tornar a p√°gina responsiva</li>
                </ul>
            </div>
        `
    }
];

// Estado da aplica√ß√£o
let currentModuleId = null;
let currentFilter = 'all';
let completedModules = JSON.parse(localStorage.getItem('completedModules') || '[]');

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    setupNavigation();
    renderModules();
    updateProgress();
    setupFilters();
}

function setupNavigation() {
    // Smooth scroll
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });

    // Header scroll effect
    window.addEventListener('scroll', () => {
        const header = document.querySelector('.header');
        if (window.scrollY > 100) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
    });
}

function renderModules() {
    const modulesGrid = document.getElementById('modules-grid');
    if (!modulesGrid) return;

    const filteredModules = currentFilter === 'all' 
        ? modulesData 
        : modulesData.filter(module => module.category === currentFilter);

    modulesGrid.innerHTML = filteredModules.map(module => createModuleCard(module)).join('');
}

function createModuleCard(module) {
    const isCompleted = completedModules.includes(module.id);
    const statusClass = isCompleted ? 'completed' : 'available';
    const statusText = isCompleted ? 'Conclu√≠do' : 'Dispon√≠vel';
    
    return `
        <div class="module-card" data-category="${module.category}" onclick="startModule(${module.id})">
            <div class="module-header">
                <div class="module-number">${module.id}</div>
                <div class="module-category">${getCategoryName(module.category)}</div>
            </div>
            <h3 class="module-title">${module.title}</h3>
            <p class="module-description">${module.description}</p>
            <div class="module-meta">
                <div class="module-duration">
                    <i class="fas fa-clock"></i>
                    <span>${module.duration}</span>
                </div>
                <div class="module-status ${statusClass}">${statusText}</div>
            </div>
        </div>
    `;
}

function getCategoryName(category) {
    const categories = {
        'frontend': 'Frontend',
        'backend': 'Backend',
        'deploy': 'Deploy'
    };
    return categories[category] || category;
}

function setupFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            filterButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            currentFilter = button.dataset.filter;
            renderModules();
        });
    });
}

function updateProgress() {
    const progressFill = document.querySelector('.progress-fill');
    const progressText = document.querySelector('.progress-text');
    
    if (!progressFill || !progressText) return;
    
    const totalModules = modulesData.length;
    const completedCount = completedModules.length;
    const progressPercentage = (completedCount / totalModules) * 100;
    
    progressFill.style.width = `${progressPercentage}%`;
    progressText.textContent = `${completedCount} de ${totalModules} m√≥dulos conclu√≠dos`;
}

function startModule(moduleId) {
    currentModuleId = moduleId;
    const module = modulesData.find(m => m.id === moduleId);
    
    if (!module) return;
    
    // Esconder se√ß√µes do curso
    document.querySelectorAll('.hero, .overview, .modules, .methodology, .cta').forEach(section => {
        section.style.display = 'none';
    });
    
    // Mostrar se√ß√£o do m√≥dulo
    const moduleSection = document.getElementById('module-content');
    moduleSection.classList.remove('hidden');
    
    // Carregar conte√∫do do m√≥dulo
    loadModuleContent(module);
    
    // Scroll para o topo
    window.scrollTo(0, 0);
}

function loadModuleContent(module) {
    // Atualizar header do m√≥dulo
    document.getElementById('current-module-number').textContent = `M√≥dulo ${module.id}`;
    document.getElementById('current-module-duration').innerHTML = `<i class="fas fa-clock"></i> ${module.duration}`;
    
    // Carregar conte√∫do
    document.getElementById('module-content-area').innerHTML = module.content;
    
    // Criar TOC
    createTOC(module);
    
    // Criar checkpoints
    createCheckpoints(module);
    
    // Atualizar navega√ß√£o
    updateModuleNavigation(module);
}

function createTOC(module) {
    const tocList = document.getElementById('module-toc');
    const contentArea = document.getElementById('module-content-area');
    const headings = contentArea.querySelectorAll('h2');
    
    tocList.innerHTML = '';
    
    headings.forEach((heading, index) => {
        const id = `section-${index}`;
        heading.id = id;
        
        const li = document.createElement('li');
        li.innerHTML = `<a href="#${id}" class="toc-link">${heading.textContent}</a>`;
        tocList.appendChild(li);
    });
}

function createCheckpoints(module) {
    const checkpointsList = document.getElementById('checkpoints-list');
    checkpointsList.innerHTML = '';
    
    if (module.objectives) {
        module.objectives.forEach((objective, index) => {
            const div = document.createElement('div');
            div.className = 'checkpoint-item';
            div.innerHTML = `
                <input type="checkbox" id="checkpoint-${index}" class="checkpoint-input">
                <label for="checkpoint-${index}" class="checkpoint-label">${objective}</label>
            `;
            checkpointsList.appendChild(div);
        });
        
        // Adicionar event listeners
        checkpointsList.querySelectorAll('.checkpoint-input').forEach(checkbox => {
            checkbox.addEventListener('change', updateModuleProgress);
        });
    }
}

function updateModuleNavigation(module) {
    const prevBtn = document.getElementById('prev-module');
    const nextBtn = document.getElementById('next-module');
    
    if (module.id === 1) {
        prevBtn.style.display = 'none';
    } else {
        prevBtn.style.display = 'flex';
    }
    
    if (module.id === modulesData.length) {
        nextBtn.innerHTML = '<i class="fas fa-trophy"></i> Parab√©ns! M√≥dulos Conclu√≠dos!';
        nextBtn.className = 'btn btn-success';
    } else {
        nextBtn.innerHTML = 'Pr√≥ximo M√≥dulo <i class="fas fa-chevron-right"></i>';
        nextBtn.className = 'btn btn-primary';
    }
}

function updateModuleProgress() {
    const checkboxes = document.querySelectorAll('.checkpoint-input');
    const completed = document.querySelectorAll('.checkpoint-input:checked').length;
    const total = checkboxes.length;
    
    const progress = total > 0 ? (completed / total) * 100 : 0;
    
    const progressText = document.querySelector('.progress-circle .progress-text');
    if (progressText) {
        progressText.textContent = `${Math.round(progress)}%`;
    }
}

function goToPrevModule() {
    if (currentModuleId > 1) {
        startModule(currentModuleId - 1);
    }
}

function goToNextModule() {
    if (currentModuleId < modulesData.length) {
        startModule(currentModuleId + 1);
    } else {
        alert('üéâ Parab√©ns! Voc√™ completou todos os m√≥dulos dispon√≠veis!');
    }
}

function showCourseHome() {
    document.getElementById('module-content').classList.add('hidden');
    document.querySelectorAll('.hero, .overview, .modules, .methodology, .cta').forEach(section => {
        section.style.display = '';
    });
    currentModuleId = null;
    
    // Scroll para m√≥dulos
    setTimeout(() => {
        document.getElementById('modules').scrollIntoView({ behavior: 'smooth' });
    }, 100);
}

function completeModule() {
    if (!currentModuleId) return;
    
    // Marcar todos os checkpoints
    document.querySelectorAll('.checkpoint-input').forEach(cb => {
        cb.checked = true;
    });
    
    updateModuleProgress();
    
    if (!completedModules.includes(currentModuleId)) {
        completedModules.push(currentModuleId);
        localStorage.setItem('completedModules', JSON.stringify(completedModules));
    }
    
    const button = document.querySelector('.complete-module');
    if (button) {
        button.innerHTML = '<i class="fas fa-check"></i> Conclu√≠do!';
        button.className = 'btn btn-success complete-module';
        button.disabled = true;
    }
    
    updateProgress();
    
    // Mostrar mensagem de sucesso
    alert(`üéâ Parab√©ns! Voc√™ concluiu o M√≥dulo ${currentModuleId}!`);
}

function copyCode(button) {
    const codeBlock = button.closest('.code-block');
    const code = codeBlock.querySelector('pre code').textContent;
    
    navigator.clipboard.writeText(code).then(() => {
        const originalText = button.innerHTML;
        button.innerHTML = '‚úÖ Copiado!';
        button.style.background = '#10b981';
        
        setTimeout(() => {
            button.innerHTML = originalText;
            button.style.background = '#6366f1';
        }, 2000);
    }).catch(err => {
        console.error('Erro ao copiar c√≥digo:', err);
        alert('Erro ao copiar c√≥digo. Tente selecionar manualmente.');
    });
}

// Exportar fun√ß√µes globais
window.startModule = startModule;
window.goToPrevModule = goToPrevModule;
window.goToNextModule = goToNextModule;
window.showCourseHome = showCourseHome;
window.completeModule = completeModule;
window.copyCode = copyCode;